syntax = "proto3";
package proto;
option go_package = "./proto";

import "common.proto";

message ClientResponse {
    string secretKey = 2;       // 秘钥
}

// 获取数据的返回结构体
message GetResponse {
    string data = 1;
}

// Keys 的返回结构体
message KeysResponse {
    repeated string data = 1;
}

// 获取数据的请求结构体
message KeyRequest {
    string key = 1;
}

// 设置数据的请求结构体
message SetRequest {
    string key = 1;
    string data = 2;
    int64 expire = 3;
}

// Expire 的请求结构体
message AddExpireRequest {
    string key = 1;
    int64 expire = 2;
}

// MoveExpireRequest 的请求结构体
message MoveExpireRequest {
    string key = 1;
}

enum WatchType {
    WATCH_TYPE_PUT = 0;                 // 设置数据
    WATCH_TYPE_DELETE = 1;              // 删除数据
    WATCH_TYPE_EXPIRE = 2;              // 设置过期时间
    WATCH_TYPE_MOVE_EXPIRE = 3;         // 移除过期时间
    WATCH_TYPE_ADD_EXPIRE = 4;          // 添加过期时间
    WATCH_TYPE_LOCK = 5;                // 锁定
    WATCH_TYPE_UNLOCK = 6;              // 解锁
    WATCH_TYPE_TRYLOCK = 7;             // 尝试加锁
    WATCH_TYPE_RENEWLOCK = 8;           // 续约
    WATCH_TYPE_LOCK_EXPIRE = 9;         // 锁过期
}

message Notification {
    string Key = 1;
    string Value = 2;
    int64 Expire = 3;
    bool IsLock = 5;
    int64 LeaseID = 6;
}

// Key 的变化返回结构体
message KeyChange {
    WatchType type = 1;
    string key = 2;
    Notification data = 3;
}


// 客户端操作接口
service CadbClientHelper {
    rpc NewClient(Empty) returns (ClientResponse); // 新建客户端
    rpc CloseClient(Empty) returns(Empty); // 关闭客户端
}

// 数据库操作接口
service CadbStoreHelper {
    rpc Get(KeyRequest) returns (GetResponse); // 获取数据
    rpc Set(SetRequest) returns (Empty); // 设置数据
    rpc Delete(KeyRequest) returns (Empty); // 删除数据
    rpc Keys(Empty) returns (KeysResponse); // 获取 keys 
    rpc AddExpire(AddExpireRequest) returns (Empty); // 设置key的过期时间
    rpc MoveExpire(MoveExpireRequest) returns (Empty); // 移除 key的过期时间
}

// 观察器接口
service CadbWatchHelper {
    rpc WatchLock(KeyRequest) returns (stream KeyChange); // 监听锁的变化
    rpc CloseWatchLock(KeyRequest) returns (Empty); // 关闭监听
    rpc Watch(KeyRequest) returns (stream KeyChange); // 监听key的变化
    rpc CloseWatch(KeyRequest) returns (Empty); // 关闭监听
}

// 续约请求结构
message RenewLockEntryRequest {
    string key = 1;         // 锁
    int64 ttl = 2;          // 过期时间
    int64 leaseID = 3;      // 租约ID
}

// 解锁请求结构
message UnLockEntryRequest {
    string key = 1;         // 锁
    int64 leaseID = 2;      // 租约ID
}

// 锁定请求结构
message LockEntryRequest {
    string key = 1;         // 锁
    int64 ttl = 2;          // 过期时间
}

// 锁信息
message LockEntryResponse {
    string key = 1;         // 锁
    int64 ttl = 2;          // 过期时间
    int64 leaseID = 3;      // 租约ID
    bool lock = 4;          // 是否加锁
}

// 数据库锁操作接口
service CadbLockHelper {
    rpc Lock(LockEntryRequest) returns (LockEntryResponse); // 加锁
    rpc Unlock(UnLockEntryRequest) returns (Empty); // 解锁
    rpc RenewLock(RenewLockEntryRequest) returns (LockEntryResponse); // 续约
    rpc TryLock(LockEntryRequest) returns (LockEntryResponse); // 尝试加锁 
}